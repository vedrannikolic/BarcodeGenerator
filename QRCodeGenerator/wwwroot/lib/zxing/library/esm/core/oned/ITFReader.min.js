/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/esm/core/oned/ITFReader.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
var __extends=this&&this.__extends||function(){var r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,t){r.__proto__=t}||function(r,t){for(var e in t)t.hasOwnProperty(e)&&(r[e]=t[e])},r(t,e)};return function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}(),__values=this&&this.__values||function(r){var t="function"==typeof Symbol&&Symbol.iterator,e=t&&r[t],n=0;if(e)return e.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};import BarcodeFormat from"../BarcodeFormat";import DecodeHintType from"../DecodeHintType";import FormatException from"../FormatException";import NotFoundException from"../NotFoundException";import Result from"../Result";import ResultPoint from"../ResultPoint";import StringBuilder from"../util/StringBuilder";import System from"../util/System";import OneDReader from"./OneDReader";var ITFReader=function(r){function t(){var t=null!==r&&r.apply(this,arguments)||this;return t.narrowLineWidth=-1,t}return __extends(t,r),t.prototype.decodeRow=function(r,e,n){var o,i,a=this.decodeStart(e),f=this.decodeEnd(e),d=new StringBuilder;t.decodeMiddle(e,a[1],f[0],d);var u=d.toString(),c=null;null!=n&&(c=n.get(DecodeHintType.ALLOWED_LENGTHS)),null==c&&(c=t.DEFAULT_ALLOWED_LENGTHS);var A=u.length,l=!1,p=0;try{for(var y=__values(c),m=y.next();!m.done;m=y.next()){var E=m.value;if(A===E){l=!0;break}E>p&&(p=E)}}catch(r){o={error:r}}finally{try{m&&!m.done&&(i=y.return)&&i.call(y)}finally{if(o)throw o.error}}if(!l&&A>p&&(l=!0),!l)throw new FormatException;var I=[new ResultPoint(a[1],r),new ResultPoint(f[0],r)];return new Result(u,null,0,I,BarcodeFormat.ITF,(new Date).getTime())},t.decodeMiddle=function(r,e,n,o){var i=new Int32Array(10),a=new Int32Array(5),f=new Int32Array(5);for(i.fill(0),a.fill(0),f.fill(0);e<n;){OneDReader.recordPattern(r,e,i);for(var d=0;d<5;d++){var u=2*d;a[d]=i[u],f[d]=i[u+1]}var c=t.decodeDigit(a);o.append(c.toString()),c=this.decodeDigit(f),o.append(c.toString()),i.forEach((function(r){e+=r}))}},t.prototype.decodeStart=function(r){var e=t.skipWhiteSpace(r),n=t.findGuardPattern(r,e,t.START_PATTERN);return this.narrowLineWidth=(n[1]-n[0])/4,this.validateQuietZone(r,n[0]),n},t.prototype.validateQuietZone=function(r,t){var e=10*this.narrowLineWidth;e=e<t?e:t;for(var n=t-1;e>0&&n>=0&&!r.get(n);n--)e--;if(0!==e)throw new NotFoundException},t.skipWhiteSpace=function(r){var t=r.getSize(),e=r.getNextSet(0);if(e===t)throw new NotFoundException;return e},t.prototype.decodeEnd=function(r){r.reverse();try{var e=t.skipWhiteSpace(r),n=void 0;try{n=t.findGuardPattern(r,e,t.END_PATTERN_REVERSED[0])}catch(o){o instanceof NotFoundException&&(n=t.findGuardPattern(r,e,t.END_PATTERN_REVERSED[1]))}this.validateQuietZone(r,n[0]);var o=n[0];return n[0]=r.getSize()-n[1],n[1]=r.getSize()-o,n}finally{r.reverse()}},t.findGuardPattern=function(r,e,n){var o=n.length,i=new Int32Array(o),a=r.getSize(),f=!1,d=0,u=e;i.fill(0);for(var c=e;c<a;c++)if(r.get(c)!==f)i[d]++;else{if(d===o-1){if(OneDReader.patternMatchVariance(i,n,t.MAX_INDIVIDUAL_VARIANCE)<t.MAX_AVG_VARIANCE)return[u,c];u+=i[0]+i[1],System.arraycopy(i,2,i,0,d-1),i[d-1]=0,i[d]=0,d--}else d++;i[d]=1,f=!f}throw new NotFoundException},t.decodeDigit=function(r){for(var e=t.MAX_AVG_VARIANCE,n=-1,o=t.PATTERNS.length,i=0;i<o;i++){var a=t.PATTERNS[i],f=OneDReader.patternMatchVariance(r,a,t.MAX_INDIVIDUAL_VARIANCE);f<e?(e=f,n=i):f===e&&(n=-1)}if(n>=0)return n%10;throw new NotFoundException},t.PATTERNS=[Int32Array.from([1,1,2,2,1]),Int32Array.from([2,1,1,1,2]),Int32Array.from([1,2,1,1,2]),Int32Array.from([2,2,1,1,1]),Int32Array.from([1,1,2,1,2]),Int32Array.from([2,1,2,1,1]),Int32Array.from([1,2,2,1,1]),Int32Array.from([1,1,1,2,2]),Int32Array.from([2,1,1,2,1]),Int32Array.from([1,2,1,2,1]),Int32Array.from([1,1,3,3,1]),Int32Array.from([3,1,1,1,3]),Int32Array.from([1,3,1,1,3]),Int32Array.from([3,3,1,1,1]),Int32Array.from([1,1,3,1,3]),Int32Array.from([3,1,3,1,1]),Int32Array.from([1,3,3,1,1]),Int32Array.from([1,1,1,3,3]),Int32Array.from([3,1,1,3,1]),Int32Array.from([1,3,1,3,1])],t.MAX_AVG_VARIANCE=.38,t.MAX_INDIVIDUAL_VARIANCE=.5,t.DEFAULT_ALLOWED_LENGTHS=[6,8,10,12,14],t.START_PATTERN=Int32Array.from([1,1,1,1]),t.END_PATTERN_REVERSED=[Int32Array.from([1,1,2]),Int32Array.from([1,1,3])],t}(OneDReader);export default ITFReader;
//# sourceMappingURL=/sm/0f5150fa6a70f8c96c1d7e4a25953e197c381833c6e9d1d60bfbd5ef1989d117.map