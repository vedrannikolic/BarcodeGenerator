/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/datamatrix/decoder/Decoder.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import ChecksumException from"../../ChecksumException";import GenericGF from"../../common/reedsolomon/GenericGF";import ReedSolomonDecoder from"../../common/reedsolomon/ReedSolomonDecoder";import BitMatrixParser from"./BitMatrixParser";import DataBlock from"./DataBlock";import DecodedBitStreamParser from"./DecodedBitStreamParser";export default class Decoder{constructor(){this.rsDecoder=new ReedSolomonDecoder(GenericGF.DATA_MATRIX_FIELD_256)}decode(e){const o=new BitMatrixParser(e),r=o.getVersion(),t=o.readCodewords(),c=DataBlock.getDataBlocks(t,r);let d=0;for(let e of c)d+=e.getNumDataCodewords();const s=new Uint8Array(d),a=c.length;for(let e=0;e<a;e++){const o=c[e],r=o.getCodewords(),t=o.getNumDataCodewords();this.correctErrors(r,t);for(let o=0;o<t;o++)s[o*a+e]=r[o]}return DecodedBitStreamParser.decode(s)}correctErrors(e,o){const r=new Int32Array(e);try{this.rsDecoder.decode(r,e.length-o)}catch(e){throw new ChecksumException}for(let t=0;t<o;t++)e[t]=r[t]}}
//# sourceMappingURL=/sm/3f56985546403d75378e4871186efc756bdb3ede1352d8c374c9001e087d17ee.map