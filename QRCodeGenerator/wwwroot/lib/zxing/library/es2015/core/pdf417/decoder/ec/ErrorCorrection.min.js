/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/pdf417/decoder/ec/ErrorCorrection.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import ChecksumException from"../../../ChecksumException";import ModulusPoly from"./ModulusPoly";import ModulusGF from"./ModulusGF";export default class ErrorCorrection{constructor(){this.field=ModulusGF.PDF417_GF}decode(e,t,i){let l=new ModulusPoly(this.field,e),r=new Int32Array(t),o=!1;for(let e=t;e>0;e--){let i=l.evaluateAt(this.field.exp(e));r[t-e]=i,0!==i&&(o=!0)}if(!o)return 0;let s=this.field.getOne();if(null!=i)for(const t of i){let i=this.field.exp(e.length-1-t),l=new ModulusPoly(this.field,new Int32Array([this.field.subtract(0,i),1]));s=s.multiply(l)}let n=new ModulusPoly(this.field,r),u=this.runEuclideanAlgorithm(this.field.buildMonomial(t,1),n,t),f=u[0],d=u[1],h=this.findErrorLocations(f),g=this.findErrorMagnitudes(d,f,h);for(let t=0;t<h.length;t++){let i=e.length-1-this.field.log(h[t]);if(i<0)throw ChecksumException.getChecksumInstance();e[i]=this.field.subtract(e[i],g[t])}return h.length}runEuclideanAlgorithm(e,t,i){if(e.getDegree()<t.getDegree()){let i=e;e=t,t=i}let l=e,r=t,o=this.field.getZero(),s=this.field.getOne();for(;r.getDegree()>=Math.round(i/2);){let e=l,t=o;if(l=r,o=s,l.isZero())throw ChecksumException.getChecksumInstance();r=e;let i=this.field.getZero(),n=l.getCoefficient(l.getDegree()),u=this.field.inverse(n);for(;r.getDegree()>=l.getDegree()&&!r.isZero();){let e=r.getDegree()-l.getDegree(),t=this.field.multiply(r.getCoefficient(r.getDegree()),u);i=i.add(this.field.buildMonomial(e,t)),r=r.subtract(l.multiplyByMonomial(e,t))}s=i.multiply(o).subtract(t).negative()}let n=s.getCoefficient(0);if(0===n)throw ChecksumException.getChecksumInstance();let u=this.field.inverse(n);return[s.multiply(u),r.multiply(u)]}findErrorLocations(e){let t=e.getDegree(),i=new Int32Array(t),l=0;for(let r=1;r<this.field.getSize()&&l<t;r++)0===e.evaluateAt(r)&&(i[l]=this.field.inverse(r),l++);if(l!==t)throw ChecksumException.getChecksumInstance();return i}findErrorMagnitudes(e,t,i){let l=t.getDegree(),r=new Int32Array(l);for(let e=1;e<=l;e++)r[l-e]=this.field.multiply(e,t.getCoefficient(e));let o=new ModulusPoly(this.field,r),s=i.length,n=new Int32Array(s);for(let t=0;t<s;t++){let l=this.field.inverse(i[t]),r=this.field.subtract(0,e.evaluateAt(l)),s=this.field.inverse(o.evaluateAt(l));n[t]=this.field.multiply(r,s)}return n}}
//# sourceMappingURL=/sm/d594fd1fc0e7122f61b53f066dcea278aae991dbbc250a5f1262f52e530af2ca.map