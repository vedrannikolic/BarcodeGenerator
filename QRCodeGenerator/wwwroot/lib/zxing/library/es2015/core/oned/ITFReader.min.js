/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/oned/ITFReader.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import BarcodeFormat from"../BarcodeFormat";import DecodeHintType from"../DecodeHintType";import FormatException from"../FormatException";import NotFoundException from"../NotFoundException";import Result from"../Result";import ResultPoint from"../ResultPoint";import StringBuilder from"../util/StringBuilder";import System from"../util/System";import OneDReader from"./OneDReader";export default class ITFReader extends OneDReader{constructor(){super(...arguments),this.narrowLineWidth=-1}decodeRow(e,r,t){let n=this.decodeStart(r),o=this.decodeEnd(r),a=new StringBuilder;ITFReader.decodeMiddle(r,n[1],o[0],a);let i=a.toString(),d=null;null!=t&&(d=t.get(DecodeHintType.ALLOWED_LENGTHS)),null==d&&(d=ITFReader.DEFAULT_ALLOWED_LENGTHS);let I=i.length,A=!1,f=0;for(let e of d){if(I===e){A=!0;break}e>f&&(f=e)}if(!A&&I>f&&(A=!0),!A)throw new FormatException;const l=[new ResultPoint(n[1],e),new ResultPoint(o[0],e)];return new Result(i,null,0,l,BarcodeFormat.ITF,(new Date).getTime())}static decodeMiddle(e,r,t,n){let o=new Int32Array(10),a=new Int32Array(5),i=new Int32Array(5);for(o.fill(0),a.fill(0),i.fill(0);r<t;){OneDReader.recordPattern(e,r,o);for(let e=0;e<5;e++){let r=2*e;a[e]=o[r],i[e]=o[r+1]}let t=ITFReader.decodeDigit(a);n.append(t.toString()),t=this.decodeDigit(i),n.append(t.toString()),o.forEach((function(e){r+=e}))}}decodeStart(e){let r=ITFReader.skipWhiteSpace(e),t=ITFReader.findGuardPattern(e,r,ITFReader.START_PATTERN);return this.narrowLineWidth=(t[1]-t[0])/4,this.validateQuietZone(e,t[0]),t}validateQuietZone(e,r){let t=10*this.narrowLineWidth;t=t<r?t:r;for(let n=r-1;t>0&&n>=0&&!e.get(n);n--)t--;if(0!==t)throw new NotFoundException}static skipWhiteSpace(e){const r=e.getSize(),t=e.getNextSet(0);if(t===r)throw new NotFoundException;return t}decodeEnd(e){e.reverse();try{let r,t=ITFReader.skipWhiteSpace(e);try{r=ITFReader.findGuardPattern(e,t,ITFReader.END_PATTERN_REVERSED[0])}catch(n){n instanceof NotFoundException&&(r=ITFReader.findGuardPattern(e,t,ITFReader.END_PATTERN_REVERSED[1]))}this.validateQuietZone(e,r[0]);let n=r[0];return r[0]=e.getSize()-r[1],r[1]=e.getSize()-n,r}finally{e.reverse()}}static findGuardPattern(e,r,t){let n=t.length,o=new Int32Array(n),a=e.getSize(),i=!1,d=0,I=r;o.fill(0);for(let A=r;A<a;A++)if(e.get(A)!==i)o[d]++;else{if(d===n-1){if(OneDReader.patternMatchVariance(o,t,ITFReader.MAX_INDIVIDUAL_VARIANCE)<ITFReader.MAX_AVG_VARIANCE)return[I,A];I+=o[0]+o[1],System.arraycopy(o,2,o,0,d-1),o[d-1]=0,o[d]=0,d--}else d++;o[d]=1,i=!i}throw new NotFoundException}static decodeDigit(e){let r=ITFReader.MAX_AVG_VARIANCE,t=-1,n=ITFReader.PATTERNS.length;for(let o=0;o<n;o++){let n=ITFReader.PATTERNS[o],a=OneDReader.patternMatchVariance(e,n,ITFReader.MAX_INDIVIDUAL_VARIANCE);a<r?(r=a,t=o):a===r&&(t=-1)}if(t>=0)return t%10;throw new NotFoundException}}ITFReader.PATTERNS=[Int32Array.from([1,1,2,2,1]),Int32Array.from([2,1,1,1,2]),Int32Array.from([1,2,1,1,2]),Int32Array.from([2,2,1,1,1]),Int32Array.from([1,1,2,1,2]),Int32Array.from([2,1,2,1,1]),Int32Array.from([1,2,2,1,1]),Int32Array.from([1,1,1,2,2]),Int32Array.from([2,1,1,2,1]),Int32Array.from([1,2,1,2,1]),Int32Array.from([1,1,3,3,1]),Int32Array.from([3,1,1,1,3]),Int32Array.from([1,3,1,1,3]),Int32Array.from([3,3,1,1,1]),Int32Array.from([1,1,3,1,3]),Int32Array.from([3,1,3,1,1]),Int32Array.from([1,3,3,1,1]),Int32Array.from([1,1,1,3,3]),Int32Array.from([3,1,1,3,1]),Int32Array.from([1,3,1,3,1])],ITFReader.MAX_AVG_VARIANCE=.38,ITFReader.MAX_INDIVIDUAL_VARIANCE=.5,ITFReader.DEFAULT_ALLOWED_LENGTHS=[6,8,10,12,14],ITFReader.START_PATTERN=Int32Array.from([1,1,1,1]),ITFReader.END_PATTERN_REVERSED=[Int32Array.from([1,1,2]),Int32Array.from([1,1,3])];
//# sourceMappingURL=/sm/4d728ef688b93afcc5725c63af40e0a7a424b25a7ca6cb07751c9f5bb25b1493.map