/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/oned/rss/expanded/decoders/AI01393xDecoder.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import AI01decoder from"./AI01decoder";import NotFoundException from"../../../../NotFoundException";import StringBuilder from"../../../../util/StringBuilder";export default class AI01393xDecoder extends AI01decoder{constructor(e){super(e)}parseInformation(){if(this.getInformation().getSize()<AI01393xDecoder.HEADER_SIZE+AI01decoder.GTIN_SIZE)throw new NotFoundException;let e=new StringBuilder;this.encodeCompressedGtin(e,AI01393xDecoder.HEADER_SIZE);let r=this.getGeneralDecoder().extractNumericValueFromBitArray(AI01393xDecoder.HEADER_SIZE+AI01decoder.GTIN_SIZE,AI01393xDecoder.LAST_DIGIT_SIZE);e.append("(393"),e.append(r),e.append(")");let I=this.getGeneralDecoder().extractNumericValueFromBitArray(AI01393xDecoder.HEADER_SIZE+AI01decoder.GTIN_SIZE+AI01393xDecoder.LAST_DIGIT_SIZE,AI01393xDecoder.FIRST_THREE_DIGITS_SIZE);I/100==0&&e.append("0"),I/10==0&&e.append("0"),e.append(I);let o=this.getGeneralDecoder().decodeGeneralPurposeField(AI01393xDecoder.HEADER_SIZE+AI01decoder.GTIN_SIZE+AI01393xDecoder.LAST_DIGIT_SIZE+AI01393xDecoder.FIRST_THREE_DIGITS_SIZE,null);return e.append(o.getNewString()),e.toString()}}AI01393xDecoder.HEADER_SIZE=8,AI01393xDecoder.LAST_DIGIT_SIZE=2,AI01393xDecoder.FIRST_THREE_DIGITS_SIZE=10;
//# sourceMappingURL=/sm/a9fc3bbc3df246f035bae0696e71f19afdac96dbd42a88ab6b64df09eeecce60.map