/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/oned/UPCEANReader.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import BarcodeFormat from"../BarcodeFormat";import DecodeHintType from"../DecodeHintType";import Result from"../Result";import ResultMetadataType from"../ResultMetadataType";import ResultPoint from"../ResultPoint";import UPCEANExtensionSupport from"./UPCEANExtensionSupport";import AbstractUPCEANReader from"./AbstractUPCEANReader";import NotFoundException from"../NotFoundException";import FormatException from"../FormatException";import ChecksumException from"../ChecksumException";export default class UPCEANReader extends AbstractUPCEANReader{constructor(){super(),this.decodeRowStringBuffer="",UPCEANReader.L_AND_G_PATTERNS=UPCEANReader.L_PATTERNS.map((e=>Int32Array.from(e)));for(let e=10;e<20;e++){let t=UPCEANReader.L_PATTERNS[e-10],r=new Int32Array(t.length);for(let e=0;e<t.length;e++)r[e]=t[t.length-e-1];UPCEANReader.L_AND_G_PATTERNS[e]=r}}decodeRow(e,t,r){let o=UPCEANReader.findStartGuardPattern(t),n=null==r?null:r.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);if(null!=n){const t=new ResultPoint((o[0]+o[1])/2,e);n.foundPossibleResultPoint(t)}let a=this.decodeMiddle(t,o,this.decodeRowStringBuffer),i=a.rowOffset,d=a.resultString;if(null!=n){const t=new ResultPoint(i,e);n.foundPossibleResultPoint(t)}let l=UPCEANReader.decodeEnd(t,i);if(null!=n){const t=new ResultPoint((l[0]+l[1])/2,e);n.foundPossibleResultPoint(t)}let c=l[1],s=c+(c-l[0]);if(s>=t.getSize()||!t.isRange(c,s,!1))throw new NotFoundException;let u=d.toString();if(u.length<8)throw new FormatException;if(!UPCEANReader.checkChecksum(u))throw new ChecksumException;let E=(o[1]+o[0])/2,A=(l[1]+l[0])/2,P=this.getBarcodeFormat(),R=[new ResultPoint(E,e),new ResultPoint(A,e)],N=new Result(u,null,0,R,P,(new Date).getTime()),m=0;try{let r=UPCEANExtensionSupport.decodeRow(e,t,l[1]);N.putMetadata(ResultMetadataType.UPC_EAN_EXTENSION,r.getText()),N.putAllMetadata(r.getResultMetadata()),N.addResultPoints(r.getResultPoints()),m=r.getText().length}catch(e){}let f=null==r?null:r.get(DecodeHintType.ALLOWED_EAN_EXTENSIONS);if(null!=f){let e=!1;for(let t in f)if(m.toString()===t){e=!0;break}if(!e)throw new NotFoundException}return P===BarcodeFormat.EAN_13||BarcodeFormat.UPC_A,N}static checkChecksum(e){return UPCEANReader.checkStandardUPCEANChecksum(e)}static checkStandardUPCEANChecksum(e){let t=e.length;if(0===t)return!1;let r=parseInt(e.charAt(t-1),10);return UPCEANReader.getStandardUPCEANChecksum(e.substring(0,t-1))===r}static getStandardUPCEANChecksum(e){let t=e.length,r=0;for(let o=t-1;o>=0;o-=2){let t=e.charAt(o).charCodeAt(0)-"0".charCodeAt(0);if(t<0||t>9)throw new FormatException;r+=t}r*=3;for(let o=t-2;o>=0;o-=2){let t=e.charAt(o).charCodeAt(0)-"0".charCodeAt(0);if(t<0||t>9)throw new FormatException;r+=t}return(1e3-r)%10}static decodeEnd(e,t){return UPCEANReader.findGuardPattern(e,t,!1,UPCEANReader.START_END_PATTERN,new Int32Array(UPCEANReader.START_END_PATTERN.length).fill(0))}}
//# sourceMappingURL=/sm/2e05de1946e8523fb007b771b828873593764c98bd2e7156aeb9c73b0a8a50be.map