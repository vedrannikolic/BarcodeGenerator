/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/oned/OneDReader.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import BitArray from"../common/BitArray";import DecodeHintType from"../DecodeHintType";import ResultMetadataType from"../ResultMetadataType";import ResultPoint from"../ResultPoint";import NotFoundException from"../NotFoundException";export default class OneDReader{decode(t,e){try{return this.doDecode(t,e)}catch(o){if(e&&!0===e.get(DecodeHintType.TRY_HARDER)&&t.isRotateSupported()){const o=t.rotateCounterClockwise(),n=this.doDecode(o,e),r=n.getResultMetadata();let a=270;null!==r&&!0===r.get(ResultMetadataType.ORIENTATION)&&(a+=r.get(ResultMetadataType.ORIENTATION)%360),n.putMetadata(ResultMetadataType.ORIENTATION,a);const c=n.getResultPoints();if(null!==c){const t=o.getHeight();for(let e=0;e<c.length;e++)c[e]=new ResultPoint(t-c[e].getY()-1,c[e].getX())}return n}throw new NotFoundException}}reset(){}doDecode(t,e){const o=t.getWidth(),n=t.getHeight();let r=new BitArray(o);const a=e&&!0===e.get(DecodeHintType.TRY_HARDER),c=Math.max(1,n>>(a?8:5));let i;i=a?n:15;const s=Math.trunc(n/2);for(let a=0;a<i;a++){const i=Math.trunc((a+1)/2),l=s+c*(0==(1&a)?i:-i);if(l<0||l>=n)break;try{r=t.getBlackRow(l,r)}catch(t){continue}for(let t=0;t<2;t++){if(1===t&&(r.reverse(),e&&!0===e.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK))){const t=new Map;e.forEach(((e,o)=>t.set(o,e))),t.delete(DecodeHintType.NEED_RESULT_POINT_CALLBACK),e=t}try{const n=this.decodeRow(l,r,e);if(1===t){n.putMetadata(ResultMetadataType.ORIENTATION,180);const t=n.getResultPoints();null!==t&&(t[0]=new ResultPoint(o-t[0].getX()-1,t[0].getY()),t[1]=new ResultPoint(o-t[1].getX()-1,t[1].getY()))}return n}catch(t){}}}throw new NotFoundException}static recordPattern(t,e,o){const n=o.length;for(let t=0;t<n;t++)o[t]=0;const r=t.getSize();if(e>=r)throw new NotFoundException;let a=!t.get(e),c=0,i=e;for(;i<r;){if(t.get(i)!==a)o[c]++;else{if(++c===n)break;o[c]=1,a=!a}i++}if(c!==n&&(c!==n-1||i!==r))throw new NotFoundException}static recordPatternInReverse(t,e,o){let n=o.length,r=t.get(e);for(;e>0&&n>=0;)t.get(--e)!==r&&(n--,r=!r);if(n>=0)throw new NotFoundException;OneDReader.recordPattern(t,e+1,o)}static patternMatchVariance(t,e,o){const n=t.length;let r=0,a=0;for(let o=0;o<n;o++)r+=t[o],a+=e[o];if(r<a)return Number.POSITIVE_INFINITY;const c=r/a;o*=c;let i=0;for(let r=0;r<n;r++){const n=t[r],a=e[r]*c,s=n>a?n-a:a-n;if(s>o)return Number.POSITIVE_INFINITY;i+=s}return i/r}}
//# sourceMappingURL=/sm/4fd1268f6e4de92f119110285f69e2b1f7e6c52d72bbcab54acfcca3203e8a44.map