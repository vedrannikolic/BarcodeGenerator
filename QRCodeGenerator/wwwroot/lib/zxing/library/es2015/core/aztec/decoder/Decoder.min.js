/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/aztec/decoder/Decoder.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import DecoderResult from"../../common/DecoderResult";import GenericGF from"../../common/reedsolomon/GenericGF";import ReedSolomonDecoder from"../../common/reedsolomon/ReedSolomonDecoder";import IllegalStateException from"../../IllegalStateException";import FormatException from"../../FormatException";import StringUtils from"../../common/StringUtils";import Integer from"../../util/Integer";var Table;!function(e){e[e.UPPER=0]="UPPER",e[e.LOWER=1]="LOWER",e[e.MIXED=2]="MIXED",e[e.DIGIT=3]="DIGIT",e[e.PUNCT=4]="PUNCT",e[e.BINARY=5]="BINARY"}(Table||(Table={}));export default class Decoder{decode(e){this.ddata=e;let t=e.getBits(),r=this.extractBits(t),o=this.correctBits(r),a=Decoder.convertBoolArrayToByteArray(o),l=Decoder.getEncodedData(o),n=new DecoderResult(a,l,null,null);return n.setNumBits(o.length),n}static highLevelDecode(e){return this.getEncodedData(e)}static getEncodedData(e){let t=e.length,r=Table.UPPER,o=Table.UPPER,a="",l=0;for(;l<t;)if(o===Table.BINARY){if(t-l<5)break;let n=Decoder.readCode(e,l,5);if(l+=5,0===n){if(t-l<11)break;n=Decoder.readCode(e,l,11)+31,l+=11}for(let r=0;r<n;r++){if(t-l<8){l=t;break}const r=Decoder.readCode(e,l,8);a+=StringUtils.castAsNonUtf8Char(r),l+=8}o=r}else{let n=o===Table.DIGIT?4:5;if(t-l<n)break;let c=Decoder.readCode(e,l,n);l+=n;let i=Decoder.getCharacter(o,c);i.startsWith("CTRL_")?(r=o,o=Decoder.getTable(i.charAt(5)),"L"===i.charAt(6)&&(r=o)):(a+=i,o=r)}return a}static getTable(e){switch(e){case"L":return Table.LOWER;case"P":return Table.PUNCT;case"M":return Table.MIXED;case"D":return Table.DIGIT;case"B":return Table.BINARY;default:return Table.UPPER}}static getCharacter(e,t){switch(e){case Table.UPPER:return Decoder.UPPER_TABLE[t];case Table.LOWER:return Decoder.LOWER_TABLE[t];case Table.MIXED:return Decoder.MIXED_TABLE[t];case Table.PUNCT:return Decoder.PUNCT_TABLE[t];case Table.DIGIT:return Decoder.DIGIT_TABLE[t];default:throw new IllegalStateException("Bad table")}}correctBits(e){let t,r;this.ddata.getNbLayers()<=2?(r=6,t=GenericGF.AZTEC_DATA_6):this.ddata.getNbLayers()<=8?(r=8,t=GenericGF.AZTEC_DATA_8):this.ddata.getNbLayers()<=22?(r=10,t=GenericGF.AZTEC_DATA_10):(r=12,t=GenericGF.AZTEC_DATA_12);let o=this.ddata.getNbDatablocks(),a=e.length/r;if(a<o)throw new FormatException;let l=e.length%r,n=new Int32Array(a);for(let t=0;t<a;t++,l+=r)n[t]=Decoder.readCode(e,l,r);try{new ReedSolomonDecoder(t).decode(n,a-o)}catch(e){throw new FormatException(e)}let c=(1<<r)-1,i=0;for(let e=0;e<o;e++){let t=n[e];if(0===t||t===c)throw new FormatException;1!==t&&t!==c-1||i++}let d=new Array(o*r-i),T=0;for(let e=0;e<o;e++){let t=n[e];if(1===t||t===c-1)d.fill(t>1,T,T+r-1),T+=r-1;else for(let e=r-1;e>=0;--e)d[T++]=0!=(t&1<<e)}return d}extractBits(e){let t=this.ddata.isCompact(),r=this.ddata.getNbLayers(),o=(t?11:14)+4*r,a=new Int32Array(o),l=new Array(this.totalBitsInLayer(r,t));if(t)for(let e=0;e<a.length;e++)a[e]=e;else{let e=o+1+2*Integer.truncDivision(Integer.truncDivision(o,2)-1,15),t=o/2,r=Integer.truncDivision(e,2);for(let e=0;e<t;e++){let o=e+Integer.truncDivision(e,15);a[t-e-1]=r-o-1,a[t+e]=r+o+1}}for(let n=0,c=0;n<r;n++){let i=4*(r-n)+(t?9:12),d=2*n,T=o-1-d;for(let t=0;t<i;t++){let r=2*t;for(let o=0;o<2;o++)l[c+r+o]=e.get(a[d+o],a[d+t]),l[c+2*i+r+o]=e.get(a[d+t],a[T-o]),l[c+4*i+r+o]=e.get(a[T-o],a[T-t]),l[c+6*i+r+o]=e.get(a[T-t],a[d+o])}c+=8*i}return l}static readCode(e,t,r){let o=0;for(let a=t;a<t+r;a++)o<<=1,e[a]&&(o|=1);return o}static readByte(e,t){let r=e.length-t;return r>=8?Decoder.readCode(e,t,8):Decoder.readCode(e,t,r)<<8-r}static convertBoolArrayToByteArray(e){let t=new Uint8Array((e.length+7)/8);for(let r=0;r<t.length;r++)t[r]=Decoder.readByte(e,8*r);return t}totalBitsInLayer(e,t){return((t?88:112)+16*e)*e}}Decoder.UPPER_TABLE=["CTRL_PS"," ","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","CTRL_LL","CTRL_ML","CTRL_DL","CTRL_BS"],Decoder.LOWER_TABLE=["CTRL_PS"," ","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","CTRL_US","CTRL_ML","CTRL_DL","CTRL_BS"],Decoder.MIXED_TABLE=["CTRL_PS"," ","\\1","\\2","\\3","\\4","\\5","\\6","\\7","\b","\t","\n","\\13","\f","\r","\\33","\\34","\\35","\\36","\\37","@","\\","^","_","`","|","~","\\177","CTRL_LL","CTRL_UL","CTRL_PL","CTRL_BS"],Decoder.PUNCT_TABLE=["","\r","\r\n",". ",", ",": ","!",'"',"#","$","%","&","'","(",")","*","+",",","-",".","/",":",";","<","=",">","?","[","]","{","}","CTRL_UL"],Decoder.DIGIT_TABLE=["CTRL_PS"," ","0","1","2","3","4","5","6","7","8","9",",",".","CTRL_UL","CTRL_US"];
//# sourceMappingURL=/sm/7fdbf6a2f5a909a0c51f00b586f999f02c4f17542eeb56081986c1dceb531abe.map