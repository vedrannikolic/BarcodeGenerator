/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/common/BitArray.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import IllegalArgumentException from"../IllegalArgumentException";import Arrays from"../util/Arrays";import Integer from"../util/Integer";import System from"../util/System";export default class BitArray{constructor(t,e){void 0===t?(this.size=0,this.bits=new Int32Array(1)):(this.size=t,this.bits=null==e?BitArray.makeArray(t):e)}getSize(){return this.size}getSizeInBytes(){return Math.floor((this.size+7)/8)}ensureCapacity(t){if(t>32*this.bits.length){const e=BitArray.makeArray(t);System.arraycopy(this.bits,0,e,0,this.bits.length),this.bits=e}}get(t){return 0!=(this.bits[Math.floor(t/32)]&1<<(31&t))}set(t){this.bits[Math.floor(t/32)]|=1<<(31&t)}flip(t){this.bits[Math.floor(t/32)]^=1<<(31&t)}getNextSet(t){const e=this.size;if(t>=e)return e;const i=this.bits;let s=Math.floor(t/32),r=i[s];r&=~((1<<(31&t))-1);const n=i.length;for(;0===r;){if(++s===n)return e;r=i[s]}const o=32*s+Integer.numberOfTrailingZeros(r);return o>e?e:o}getNextUnset(t){const e=this.size;if(t>=e)return e;const i=this.bits;let s=Math.floor(t/32),r=~i[s];r&=~((1<<(31&t))-1);const n=i.length;for(;0===r;){if(++s===n)return e;r=~i[s]}const o=32*s+Integer.numberOfTrailingZeros(r);return o>e?e:o}setBulk(t,e){this.bits[Math.floor(t/32)]=e}setRange(t,e){if(e<t||t<0||e>this.size)throw new IllegalArgumentException;if(e===t)return;e--;const i=Math.floor(t/32),s=Math.floor(e/32),r=this.bits;for(let n=i;n<=s;n++){const o=(2<<(n<s?31:31&e))-(1<<(n>i?0:31&t));r[n]|=o}}clear(){const t=this.bits.length,e=this.bits;for(let i=0;i<t;i++)e[i]=0}isRange(t,e,i){if(e<t||t<0||e>this.size)throw new IllegalArgumentException;if(e===t)return!0;e--;const s=Math.floor(t/32),r=Math.floor(e/32),n=this.bits;for(let o=s;o<=r;o++){const h=(2<<(o<r?31:31&e))-(1<<(o>s?0:31&t))&4294967295;if((n[o]&h)!==(i?h:0))return!1}return!0}appendBit(t){this.ensureCapacity(this.size+1),t&&(this.bits[Math.floor(this.size/32)]|=1<<(31&this.size)),this.size++}appendBits(t,e){if(e<0||e>32)throw new IllegalArgumentException("Num bits must be between 0 and 32");this.ensureCapacity(this.size+e);for(let i=e;i>0;i--)this.appendBit(1==(t>>i-1&1))}appendBitArray(t){const e=t.size;this.ensureCapacity(this.size+e);for(let i=0;i<e;i++)this.appendBit(t.get(i))}xor(t){if(this.size!==t.size)throw new IllegalArgumentException("Sizes don't match");const e=this.bits;for(let i=0,s=e.length;i<s;i++)e[i]^=t.bits[i]}toBytes(t,e,i,s){for(let r=0;r<s;r++){let s=0;for(let e=0;e<8;e++)this.get(t)&&(s|=1<<7-e),t++;e[i+r]=s}}getBitArray(){return this.bits}reverse(){const t=new Int32Array(this.bits.length),e=Math.floor((this.size-1)/32),i=e+1,s=this.bits;for(let r=0;r<i;r++){let i=s[r];i=i>>1&1431655765|(1431655765&i)<<1,i=i>>2&858993459|(858993459&i)<<2,i=i>>4&252645135|(252645135&i)<<4,i=i>>8&16711935|(16711935&i)<<8,i=i>>16&65535|(65535&i)<<16,t[e-r]=i}if(this.size!==32*i){const e=32*i-this.size;let s=t[0]>>>e;for(let r=1;r<i;r++){const i=t[r];s|=i<<32-e,t[r-1]=s,s=i>>>e}t[i-1]=s}this.bits=t}static makeArray(t){return new Int32Array(Math.floor((t+31)/32))}equals(t){if(!(t instanceof BitArray))return!1;const e=t;return this.size===e.size&&Arrays.equals(this.bits,e.bits)}hashCode(){return 31*this.size+Arrays.hashCode(this.bits)}toString(){let t="";for(let e=0,i=this.size;e<i;e++)0==(7&e)&&(t+=" "),t+=this.get(e)?"X":".";return t}clone(){return new BitArray(this.size,this.bits.slice())}toArray(){let t=[];for(let e=0,i=this.size;e<i;e++)t.push(this.get(e));return t}}
//# sourceMappingURL=/sm/319cacb7ca5853db885f6cf3af0f369a5d945a56f7adcf685616275e05f9b767.map