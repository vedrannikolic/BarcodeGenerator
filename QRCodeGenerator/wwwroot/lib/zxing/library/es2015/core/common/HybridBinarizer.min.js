/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/common/HybridBinarizer.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import GlobalHistogramBinarizer from"./GlobalHistogramBinarizer";import BitMatrix from"./BitMatrix";export default class HybridBinarizer extends GlobalHistogramBinarizer{constructor(r){super(r),this.matrix=null}getBlackMatrix(){if(null!==this.matrix)return this.matrix;const r=this.getLuminanceSource(),i=r.getWidth(),e=r.getHeight();if(i>=HybridBinarizer.MINIMUM_DIMENSION&&e>=HybridBinarizer.MINIMUM_DIMENSION){const t=r.getMatrix();let a=i>>HybridBinarizer.BLOCK_SIZE_POWER;0!=(i&HybridBinarizer.BLOCK_SIZE_MASK)&&a++;let B=e>>HybridBinarizer.BLOCK_SIZE_POWER;0!=(e&HybridBinarizer.BLOCK_SIZE_MASK)&&B++;const n=HybridBinarizer.calculateBlackPoints(t,a,B,i,e),l=new BitMatrix(i,e);HybridBinarizer.calculateThresholdForBlock(t,a,B,i,e,n,l),this.matrix=l}else this.matrix=super.getBlackMatrix();return this.matrix}createBinarizer(r){return new HybridBinarizer(r)}static calculateThresholdForBlock(r,i,e,t,a,B,n){const l=a-HybridBinarizer.BLOCK_SIZE,o=t-HybridBinarizer.BLOCK_SIZE;for(let a=0;a<e;a++){let _=a<<HybridBinarizer.BLOCK_SIZE_POWER;_>l&&(_=l);const d=HybridBinarizer.cap(a,2,e-3);for(let e=0;e<i;e++){let a=e<<HybridBinarizer.BLOCK_SIZE_POWER;a>o&&(a=o);const l=HybridBinarizer.cap(e,2,i-3);let I=0;for(let r=-2;r<=2;r++){const i=B[d+r];I+=i[l-2]+i[l-1]+i[l]+i[l+1]+i[l+2]}const z=I/25;HybridBinarizer.thresholdBlock(r,a,_,z,t,n)}}}static cap(r,i,e){return r<i?i:r>e?e:r}static thresholdBlock(r,i,e,t,a,B){for(let n=0,l=e*a+i;n<HybridBinarizer.BLOCK_SIZE;n++,l+=a)for(let a=0;a<HybridBinarizer.BLOCK_SIZE;a++)(255&r[l+a])<=t&&B.set(i+a,e+n)}static calculateBlackPoints(r,i,e,t,a){const B=a-HybridBinarizer.BLOCK_SIZE,n=t-HybridBinarizer.BLOCK_SIZE,l=new Array(e);for(let a=0;a<e;a++){l[a]=new Int32Array(i);let e=a<<HybridBinarizer.BLOCK_SIZE_POWER;e>B&&(e=B);for(let B=0;B<i;B++){let i=B<<HybridBinarizer.BLOCK_SIZE_POWER;i>n&&(i=n);let o=0,_=255,d=0;for(let a=0,B=e*t+i;a<HybridBinarizer.BLOCK_SIZE;a++,B+=t){for(let i=0;i<HybridBinarizer.BLOCK_SIZE;i++){const e=255&r[B+i];o+=e,e<_&&(_=e),e>d&&(d=e)}if(d-_>HybridBinarizer.MIN_DYNAMIC_RANGE)for(a++,B+=t;a<HybridBinarizer.BLOCK_SIZE;a++,B+=t)for(let i=0;i<HybridBinarizer.BLOCK_SIZE;i++)o+=255&r[B+i]}let I=o>>2*HybridBinarizer.BLOCK_SIZE_POWER;if(d-_<=HybridBinarizer.MIN_DYNAMIC_RANGE&&(I=_/2,a>0&&B>0)){const r=(l[a-1][B]+2*l[a][B-1]+l[a-1][B-1])/4;_<r&&(I=r)}l[a][B]=I}}return l}}HybridBinarizer.BLOCK_SIZE_POWER=3,HybridBinarizer.BLOCK_SIZE=1<<HybridBinarizer.BLOCK_SIZE_POWER,HybridBinarizer.BLOCK_SIZE_MASK=HybridBinarizer.BLOCK_SIZE-1,HybridBinarizer.MINIMUM_DIMENSION=5*HybridBinarizer.BLOCK_SIZE,HybridBinarizer.MIN_DYNAMIC_RANGE=24;
//# sourceMappingURL=/sm/236f0e48505b394b30cec55b051a5fc5db83989de665aec5ceaff5eb7ccad361.map