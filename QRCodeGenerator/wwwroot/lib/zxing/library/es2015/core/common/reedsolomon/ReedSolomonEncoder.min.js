/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/common/reedsolomon/ReedSolomonEncoder.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import GenericGFPoly from"./GenericGFPoly";import System from"../../util/System";import IllegalArgumentException from"../../IllegalArgumentException";export default class ReedSolomonEncoder{constructor(e){this.field=e,this.cachedGenerators=[],this.cachedGenerators.push(new GenericGFPoly(e,Int32Array.from([1])))}buildGenerator(e){const t=this.cachedGenerators;if(e>=t.length){let r=t[t.length-1];const o=this.field;for(let n=t.length;n<=e;n++){const e=r.multiply(new GenericGFPoly(o,Int32Array.from([1,o.exp(n-1+o.getGeneratorBase())])));t.push(e),r=e}}return t[e]}encode(e,t){if(0===t)throw new IllegalArgumentException("No error correction bytes");const r=e.length-t;if(r<=0)throw new IllegalArgumentException("No data bytes provided");const o=this.buildGenerator(t),n=new Int32Array(r);System.arraycopy(e,0,n,0,r);let l=new GenericGFPoly(this.field,n);l=l.multiplyByMonomial(t,1);const i=l.divide(o)[1].getCoefficients(),c=t-i.length;for(let t=0;t<c;t++)e[r+t]=0;System.arraycopy(i,0,e,r+c,i.length)}}
//# sourceMappingURL=/sm/263c52e5eec4c4297da129644887122bd1df0c3f48157dadd353c61c40fb2d8a.map