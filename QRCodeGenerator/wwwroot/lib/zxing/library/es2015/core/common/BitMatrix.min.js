/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/common/BitMatrix.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import BitArray from"./BitArray";import System from"../util/System";import Arrays from"../util/Arrays";import StringBuilder from"../util/StringBuilder";import IllegalArgumentException from"../IllegalArgumentException";export default class BitMatrix{constructor(t,e,i,r){if(this.width=t,this.height=e,this.rowSize=i,this.bits=r,null==e&&(e=t),this.height=e,t<1||e<1)throw new IllegalArgumentException("Both dimensions must be greater than 0");null==i&&(i=Math.floor((t+31)/32)),this.rowSize=i,null==r&&(this.bits=new Int32Array(this.rowSize*this.height))}static parseFromBooleanArray(t){const e=t.length,i=t[0].length,r=new BitMatrix(i,e);for(let o=0;o<e;o++){const e=t[o];for(let t=0;t<i;t++)e[t]&&r.set(t,o)}return r}static parseFromString(t,e,i){if(null===t)throw new IllegalArgumentException("stringRepresentation cannot be null");const r=new Array(t.length);let o=0,s=0,h=-1,n=0,l=0;for(;l<t.length;)if("\n"===t.charAt(l)||"\r"===t.charAt(l)){if(o>s){if(-1===h)h=o-s;else if(o-s!==h)throw new IllegalArgumentException("row lengths do not match");s=o,n++}l++}else if(t.substring(l,l+e.length)===e)l+=e.length,r[o]=!0,o++;else{if(t.substring(l,l+i.length)!==i)throw new IllegalArgumentException("illegal character encountered: "+t.substring(l));l+=i.length,r[o]=!1,o++}if(o>s){if(-1===h)h=o-s;else if(o-s!==h)throw new IllegalArgumentException("row lengths do not match");n++}const g=new BitMatrix(h,n);for(let t=0;t<o;t++)r[t]&&g.set(Math.floor(t%h),Math.floor(t/h));return g}get(t,e){const i=e*this.rowSize+Math.floor(t/32);return 0!=(this.bits[i]>>>(31&t)&1)}set(t,e){const i=e*this.rowSize+Math.floor(t/32);this.bits[i]|=1<<(31&t)&4294967295}unset(t,e){const i=e*this.rowSize+Math.floor(t/32);this.bits[i]&=~(1<<(31&t)&4294967295)}flip(t,e){const i=e*this.rowSize+Math.floor(t/32);this.bits[i]^=1<<(31&t)&4294967295}xor(t){if(this.width!==t.getWidth()||this.height!==t.getHeight()||this.rowSize!==t.getRowSize())throw new IllegalArgumentException("input matrix dimensions do not match");const e=new BitArray(Math.floor(this.width/32)+1),i=this.rowSize,r=this.bits;for(let o=0,s=this.height;o<s;o++){const s=o*i,h=t.getRow(o,e).getBitArray();for(let t=0;t<i;t++)r[s+t]^=h[t]}}clear(){const t=this.bits,e=t.length;for(let i=0;i<e;i++)t[i]=0}setRegion(t,e,i,r){if(e<0||t<0)throw new IllegalArgumentException("Left and top must be nonnegative");if(r<1||i<1)throw new IllegalArgumentException("Height and width must be at least 1");const o=t+i,s=e+r;if(s>this.height||o>this.width)throw new IllegalArgumentException("The region must fit inside the matrix");const h=this.rowSize,n=this.bits;for(let i=e;i<s;i++){const e=i*h;for(let i=t;i<o;i++)n[e+Math.floor(i/32)]|=1<<(31&i)&4294967295}}getRow(t,e){null==e||e.getSize()<this.width?e=new BitArray(this.width):e.clear();const i=this.rowSize,r=this.bits,o=t*i;for(let t=0;t<i;t++)e.setBulk(32*t,r[o+t]);return e}setRow(t,e){System.arraycopy(e.getBitArray(),0,this.bits,t*this.rowSize,this.rowSize)}rotate180(){const t=this.getWidth(),e=this.getHeight();let i=new BitArray(t),r=new BitArray(t);for(let t=0,o=Math.floor((e+1)/2);t<o;t++)i=this.getRow(t,i),r=this.getRow(e-1-t,r),i.reverse(),r.reverse(),this.setRow(t,r),this.setRow(e-1-t,i)}getEnclosingRectangle(){const t=this.width,e=this.height,i=this.rowSize,r=this.bits;let o=t,s=e,h=-1,n=-1;for(let t=0;t<e;t++)for(let e=0;e<i;e++){const l=r[t*i+e];if(0!==l){if(t<s&&(s=t),t>n&&(n=t),32*e<o){let t=0;for(;0==(l<<31-t&4294967295);)t++;32*e+t<o&&(o=32*e+t)}if(32*e+31>h){let t=31;for(;l>>>t==0;)t--;32*e+t>h&&(h=32*e+t)}}}return h<o||n<s?null:Int32Array.from([o,s,h-o+1,n-s+1])}getTopLeftOnBit(){const t=this.rowSize,e=this.bits;let i=0;for(;i<e.length&&0===e[i];)i++;if(i===e.length)return null;const r=i/t;let o=i%t*32;const s=e[i];let h=0;for(;0==(s<<31-h&4294967295);)h++;return o+=h,Int32Array.from([o,r])}getBottomRightOnBit(){const t=this.rowSize,e=this.bits;let i=e.length-1;for(;i>=0&&0===e[i];)i--;if(i<0)return null;const r=Math.floor(i/t);let o=32*Math.floor(i%t);const s=e[i];let h=31;for(;s>>>h==0;)h--;return o+=h,Int32Array.from([o,r])}getWidth(){return this.width}getHeight(){return this.height}getRowSize(){return this.rowSize}equals(t){if(!(t instanceof BitMatrix))return!1;const e=t;return this.width===e.width&&this.height===e.height&&this.rowSize===e.rowSize&&Arrays.equals(this.bits,e.bits)}hashCode(){let t=this.width;return t=31*t+this.width,t=31*t+this.height,t=31*t+this.rowSize,t=31*t+Arrays.hashCode(this.bits),t}toString(t="X ",e="  ",i="\n"){return this.buildToString(t,e,i)}buildToString(t,e,i){let r=new StringBuilder;for(let o=0,s=this.height;o<s;o++){for(let i=0,s=this.width;i<s;i++)r.append(this.get(i,o)?t:e);r.append(i)}return r.toString()}clone(){return new BitMatrix(this.width,this.height,this.rowSize,this.bits.slice())}}
//# sourceMappingURL=/sm/7d8809cb2ee34dcb7db99dd49b59de5fbd38d99dce239ae92f94ea5fb2661e72.map