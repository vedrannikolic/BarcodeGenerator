/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/qrcode/encoder/MatrixUtil.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import BitArray from"../../common/BitArray";import Integer from"../../util/Integer";import QRCode from"./QRCode";import MaskUtil from"./MaskUtil";import WriterException from"../../WriterException";import IllegalArgumentException from"../../IllegalArgumentException";export default class MatrixUtil{constructor(){}static clearMatrix(t){t.clear(255)}static buildMatrix(t,r,e,i,a){MatrixUtil.clearMatrix(a),MatrixUtil.embedBasicPatterns(e,a),MatrixUtil.embedTypeInfo(r,i,a),MatrixUtil.maybeEmbedVersionInfo(e,a),MatrixUtil.embedDataBits(t,i,a)}static embedBasicPatterns(t,r){MatrixUtil.embedPositionDetectionPatternsAndSeparators(r),MatrixUtil.embedDarkDotAtLeftBottomCorner(r),MatrixUtil.maybeEmbedPositionAdjustmentPatterns(t,r),MatrixUtil.embedTimingPatterns(r)}static embedTypeInfo(t,r,e){const i=new BitArray;MatrixUtil.makeTypeInfoBits(t,r,i);for(let t=0,r=i.getSize();t<r;++t){const r=i.get(i.getSize()-1-t),a=MatrixUtil.TYPE_INFO_COORDINATES[t],o=a[0],n=a[1];if(e.setBoolean(o,n,r),t<8){const i=e.getWidth()-t-1,a=8;e.setBoolean(i,a,r)}else{const i=8,a=e.getHeight()-7+(t-8);e.setBoolean(i,a,r)}}}static maybeEmbedVersionInfo(t,r){if(t.getVersionNumber()<7)return;const e=new BitArray;MatrixUtil.makeVersionInfoBits(t,e);let i=17;for(let t=0;t<6;++t)for(let a=0;a<3;++a){const o=e.get(i);i--,r.setBoolean(t,r.getHeight()-11+a,o),r.setBoolean(r.getHeight()-11+a,t,o)}}static embedDataBits(t,r,e){let i=0,a=-1,o=e.getWidth()-1,n=e.getHeight()-1;for(;o>0;){for(6===o&&(o-=1);n>=0&&n<e.getHeight();){for(let a=0;a<2;++a){const m=o-a;if(!MatrixUtil.isEmpty(e.get(m,n)))continue;let f;i<t.getSize()?(f=t.get(i),++i):f=!1,255!==r&&MaskUtil.getDataMaskBit(r,m,n)&&(f=!f),e.setBoolean(m,n,f)}n+=a}a=-a,n+=a,o-=2}if(i!==t.getSize())throw new WriterException("Not all bits consumed: "+i+"/"+t.getSize())}static findMSBSet(t){return 32-Integer.numberOfLeadingZeros(t)}static calculateBCHCode(t,r){if(0===r)throw new IllegalArgumentException("0 polynomial");const e=MatrixUtil.findMSBSet(r);for(t<<=e-1;MatrixUtil.findMSBSet(t)>=e;)t^=r<<MatrixUtil.findMSBSet(t)-e;return t}static makeTypeInfoBits(t,r,e){if(!QRCode.isValidMaskPattern(r))throw new WriterException("Invalid mask pattern");const i=t.getBits()<<3|r;e.appendBits(i,5);const a=MatrixUtil.calculateBCHCode(i,MatrixUtil.TYPE_INFO_POLY);e.appendBits(a,10);const o=new BitArray;if(o.appendBits(MatrixUtil.TYPE_INFO_MASK_PATTERN,15),e.xor(o),15!==e.getSize())throw new WriterException("should not happen but we got: "+e.getSize())}static makeVersionInfoBits(t,r){r.appendBits(t.getVersionNumber(),6);const e=MatrixUtil.calculateBCHCode(t.getVersionNumber(),MatrixUtil.VERSION_INFO_POLY);if(r.appendBits(e,12),18!==r.getSize())throw new WriterException("should not happen but we got: "+r.getSize())}static isEmpty(t){return 255===t}static embedTimingPatterns(t){for(let r=8;r<t.getWidth()-8;++r){const e=(r+1)%2;MatrixUtil.isEmpty(t.get(r,6))&&t.setNumber(r,6,e),MatrixUtil.isEmpty(t.get(6,r))&&t.setNumber(6,r,e)}}static embedDarkDotAtLeftBottomCorner(t){if(0===t.get(8,t.getHeight()-8))throw new WriterException;t.setNumber(8,t.getHeight()-8,1)}static embedHorizontalSeparationPattern(t,r,e){for(let i=0;i<8;++i){if(!MatrixUtil.isEmpty(e.get(t+i,r)))throw new WriterException;e.setNumber(t+i,r,0)}}static embedVerticalSeparationPattern(t,r,e){for(let i=0;i<7;++i){if(!MatrixUtil.isEmpty(e.get(t,r+i)))throw new WriterException;e.setNumber(t,r+i,0)}}static embedPositionAdjustmentPattern(t,r,e){for(let i=0;i<5;++i){const a=MatrixUtil.POSITION_ADJUSTMENT_PATTERN[i];for(let o=0;o<5;++o)e.setNumber(t+o,r+i,a[o])}}static embedPositionDetectionPattern(t,r,e){for(let i=0;i<7;++i){const a=MatrixUtil.POSITION_DETECTION_PATTERN[i];for(let o=0;o<7;++o)e.setNumber(t+o,r+i,a[o])}}static embedPositionDetectionPatternsAndSeparators(t){const r=MatrixUtil.POSITION_DETECTION_PATTERN[0].length;MatrixUtil.embedPositionDetectionPattern(0,0,t),MatrixUtil.embedPositionDetectionPattern(t.getWidth()-r,0,t),MatrixUtil.embedPositionDetectionPattern(0,t.getWidth()-r,t);MatrixUtil.embedHorizontalSeparationPattern(0,7,t),MatrixUtil.embedHorizontalSeparationPattern(t.getWidth()-8,7,t),MatrixUtil.embedHorizontalSeparationPattern(0,t.getWidth()-8,t);MatrixUtil.embedVerticalSeparationPattern(7,0,t),MatrixUtil.embedVerticalSeparationPattern(t.getHeight()-7-1,0,t),MatrixUtil.embedVerticalSeparationPattern(7,t.getHeight()-7,t)}static maybeEmbedPositionAdjustmentPatterns(t,r){if(t.getVersionNumber()<2)return;const e=t.getVersionNumber()-1,i=MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[e];for(let t=0,e=i.length;t!==e;t++){const a=i[t];if(a>=0)for(let t=0;t!==e;t++){const e=i[t];e>=0&&MatrixUtil.isEmpty(r.get(e,a))&&MatrixUtil.embedPositionAdjustmentPattern(e-2,a-2,r)}}}}MatrixUtil.POSITION_DETECTION_PATTERN=Array.from([Int32Array.from([1,1,1,1,1,1,1]),Int32Array.from([1,0,0,0,0,0,1]),Int32Array.from([1,0,1,1,1,0,1]),Int32Array.from([1,0,1,1,1,0,1]),Int32Array.from([1,0,1,1,1,0,1]),Int32Array.from([1,0,0,0,0,0,1]),Int32Array.from([1,1,1,1,1,1,1])]),MatrixUtil.POSITION_ADJUSTMENT_PATTERN=Array.from([Int32Array.from([1,1,1,1,1]),Int32Array.from([1,0,0,0,1]),Int32Array.from([1,0,1,0,1]),Int32Array.from([1,0,0,0,1]),Int32Array.from([1,1,1,1,1])]),MatrixUtil.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE=Array.from([Int32Array.from([-1,-1,-1,-1,-1,-1,-1]),Int32Array.from([6,18,-1,-1,-1,-1,-1]),Int32Array.from([6,22,-1,-1,-1,-1,-1]),Int32Array.from([6,26,-1,-1,-1,-1,-1]),Int32Array.from([6,30,-1,-1,-1,-1,-1]),Int32Array.from([6,34,-1,-1,-1,-1,-1]),Int32Array.from([6,22,38,-1,-1,-1,-1]),Int32Array.from([6,24,42,-1,-1,-1,-1]),Int32Array.from([6,26,46,-1,-1,-1,-1]),Int32Array.from([6,28,50,-1,-1,-1,-1]),Int32Array.from([6,30,54,-1,-1,-1,-1]),Int32Array.from([6,32,58,-1,-1,-1,-1]),Int32Array.from([6,34,62,-1,-1,-1,-1]),Int32Array.from([6,26,46,66,-1,-1,-1]),Int32Array.from([6,26,48,70,-1,-1,-1]),Int32Array.from([6,26,50,74,-1,-1,-1]),Int32Array.from([6,30,54,78,-1,-1,-1]),Int32Array.from([6,30,56,82,-1,-1,-1]),Int32Array.from([6,30,58,86,-1,-1,-1]),Int32Array.from([6,34,62,90,-1,-1,-1]),Int32Array.from([6,28,50,72,94,-1,-1]),Int32Array.from([6,26,50,74,98,-1,-1]),Int32Array.from([6,30,54,78,102,-1,-1]),Int32Array.from([6,28,54,80,106,-1,-1]),Int32Array.from([6,32,58,84,110,-1,-1]),Int32Array.from([6,30,58,86,114,-1,-1]),Int32Array.from([6,34,62,90,118,-1,-1]),Int32Array.from([6,26,50,74,98,122,-1]),Int32Array.from([6,30,54,78,102,126,-1]),Int32Array.from([6,26,52,78,104,130,-1]),Int32Array.from([6,30,56,82,108,134,-1]),Int32Array.from([6,34,60,86,112,138,-1]),Int32Array.from([6,30,58,86,114,142,-1]),Int32Array.from([6,34,62,90,118,146,-1]),Int32Array.from([6,30,54,78,102,126,150]),Int32Array.from([6,24,50,76,102,128,154]),Int32Array.from([6,28,54,80,106,132,158]),Int32Array.from([6,32,58,84,110,136,162]),Int32Array.from([6,26,54,82,110,138,166]),Int32Array.from([6,30,58,86,114,142,170])]),MatrixUtil.TYPE_INFO_COORDINATES=Array.from([Int32Array.from([8,0]),Int32Array.from([8,1]),Int32Array.from([8,2]),Int32Array.from([8,3]),Int32Array.from([8,4]),Int32Array.from([8,5]),Int32Array.from([8,7]),Int32Array.from([8,8]),Int32Array.from([7,8]),Int32Array.from([5,8]),Int32Array.from([4,8]),Int32Array.from([3,8]),Int32Array.from([2,8]),Int32Array.from([1,8]),Int32Array.from([0,8])]),MatrixUtil.VERSION_INFO_POLY=7973,MatrixUtil.TYPE_INFO_POLY=1335,MatrixUtil.TYPE_INFO_MASK_PATTERN=21522;
//# sourceMappingURL=/sm/6a8260c8c335bfa1fe9da234212dc324788f5aca2aac80ee60edef532d2bd831.map