/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/qrcode/encoder/MaskUtil.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import IllegalArgumentException from"../../IllegalArgumentException";export default class MaskUtil{constructor(){}static applyMaskPenaltyRule1(t){return MaskUtil.applyMaskPenaltyRule1Internal(t,!0)+MaskUtil.applyMaskPenaltyRule1Internal(t,!1)}static applyMaskPenaltyRule2(t){let e=0;const a=t.getArray(),l=t.getWidth(),r=t.getHeight();for(let t=0;t<r-1;t++){const r=a[t];for(let i=0;i<l-1;i++){const l=r[i];l===r[i+1]&&l===a[t+1][i]&&l===a[t+1][i+1]&&e++}}return MaskUtil.N2*e}static applyMaskPenaltyRule3(t){let e=0;const a=t.getArray(),l=t.getWidth(),r=t.getHeight();for(let t=0;t<r;t++)for(let i=0;i<l;i++){const s=a[t];i+6<l&&1===s[i]&&0===s[i+1]&&1===s[i+2]&&1===s[i+3]&&1===s[i+4]&&0===s[i+5]&&1===s[i+6]&&(MaskUtil.isWhiteHorizontal(s,i-4,i)||MaskUtil.isWhiteHorizontal(s,i+7,i+11))&&e++,t+6<r&&1===a[t][i]&&0===a[t+1][i]&&1===a[t+2][i]&&1===a[t+3][i]&&1===a[t+4][i]&&0===a[t+5][i]&&1===a[t+6][i]&&(MaskUtil.isWhiteVertical(a,i,t-4,t)||MaskUtil.isWhiteVertical(a,i,t+7,t+11))&&e++}return e*MaskUtil.N3}static isWhiteHorizontal(t,e,a){e=Math.max(e,0),a=Math.min(a,t.length);for(let l=e;l<a;l++)if(1===t[l])return!1;return!0}static isWhiteVertical(t,e,a,l){a=Math.max(a,0),l=Math.min(l,t.length);for(let r=a;r<l;r++)if(1===t[r][e])return!1;return!0}static applyMaskPenaltyRule4(t){let e=0;const a=t.getArray(),l=t.getWidth(),r=t.getHeight();for(let t=0;t<r;t++){const r=a[t];for(let t=0;t<l;t++)1===r[t]&&e++}const i=t.getHeight()*t.getWidth();return Math.floor(10*Math.abs(2*e-i)/i)*MaskUtil.N4}static getDataMaskBit(t,e,a){let l,r;switch(t){case 0:l=a+e&1;break;case 1:l=1&a;break;case 2:l=e%3;break;case 3:l=(a+e)%3;break;case 4:l=Math.floor(a/2)+Math.floor(e/3)&1;break;case 5:r=a*e,l=(1&r)+r%3;break;case 6:r=a*e,l=(1&r)+r%3&1;break;case 7:r=a*e,l=r%3+(a+e&1)&1;break;default:throw new IllegalArgumentException("Invalid mask pattern: "+t)}return 0===l}static applyMaskPenaltyRule1Internal(t,e){let a=0;const l=e?t.getHeight():t.getWidth(),r=e?t.getWidth():t.getHeight(),i=t.getArray();for(let t=0;t<l;t++){let l=0,s=-1;for(let n=0;n<r;n++){const r=e?i[t][n]:i[n][t];r===s?l++:(l>=5&&(a+=MaskUtil.N1+(l-5)),l=1,s=r)}l>=5&&(a+=MaskUtil.N1+(l-5))}return a}}MaskUtil.N1=3,MaskUtil.N2=3,MaskUtil.N3=40,MaskUtil.N4=10;
//# sourceMappingURL=/sm/09987c58a7788cc4f52af21ad064692bef54e20130a8271b6adefafbf1417476.map