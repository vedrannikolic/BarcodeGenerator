/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/qrcode/QRCodeReader.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import BarcodeFormat from"../BarcodeFormat";import BitMatrix from"../common/BitMatrix";import DecodeHintType from"../DecodeHintType";import NotFoundException from"../NotFoundException";import Result from"../Result";import ResultMetadataType from"../ResultMetadataType";import Decoder from"./decoder/Decoder";import QRCodeDecoderMetaData from"./decoder/QRCodeDecoderMetaData";import Detector from"./detector/Detector";export default class QRCodeReader{constructor(){this.decoder=new Decoder}getDecoder(){return this.decoder}decode(t,e){let o,r;if(null!=e&&void 0!==e.get(DecodeHintType.PURE_BARCODE)){const d=QRCodeReader.extractPureBits(t.getBlackMatrix());o=this.decoder.decodeBitMatrix(d,e),r=QRCodeReader.NO_POINTS}else{const d=new Detector(t.getBlackMatrix()).detect(e);o=this.decoder.decodeBitMatrix(d.getBits(),e),r=d.getPoints()}o.getOther()instanceof QRCodeDecoderMetaData&&o.getOther().applyMirroredCorrection(r);const d=new Result(o.getText(),o.getRawBytes(),void 0,r,BarcodeFormat.QR_CODE,void 0),a=o.getByteSegments();null!==a&&d.putMetadata(ResultMetadataType.BYTE_SEGMENTS,a);const i=o.getECLevel();return null!==i&&d.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,i),o.hasStructuredAppend()&&(d.putMetadata(ResultMetadataType.STRUCTURED_APPEND_SEQUENCE,o.getStructuredAppendSequenceNumber()),d.putMetadata(ResultMetadataType.STRUCTURED_APPEND_PARITY,o.getStructuredAppendParity())),d}reset(){}static extractPureBits(t){const e=t.getTopLeftOnBit(),o=t.getBottomRightOnBit();if(null===e||null===o)throw new NotFoundException;const r=this.moduleSize(e,t);let d=e[1],a=o[1],i=e[0],n=o[0];if(i>=n||d>=a)throw new NotFoundException;if(a-d!=n-i&&(n=i+(a-d),n>=t.getWidth()))throw new NotFoundException;const c=Math.round((n-i+1)/r),u=Math.round((a-d+1)/r);if(c<=0||u<=0)throw new NotFoundException;if(u!==c)throw new NotFoundException;const s=Math.floor(r/2);d+=s,i+=s;const p=i+Math.floor((c-1)*r)-n;if(p>0){if(p>s)throw new NotFoundException;i-=p}const l=d+Math.floor((u-1)*r)-a;if(l>0){if(l>s)throw new NotFoundException;d-=l}const R=new BitMatrix(c,u);for(let e=0;e<u;e++){const o=d+Math.floor(e*r);for(let d=0;d<c;d++)t.get(i+Math.floor(d*r),o)&&R.set(d,e)}return R}static moduleSize(t,e){const o=e.getHeight(),r=e.getWidth();let d=t[0],a=t[1],i=!0,n=0;for(;d<r&&a<o;){if(i!==e.get(d,a)){if(5==++n)break;i=!i}d++,a++}if(d===r||a===o)throw new NotFoundException;return(d-t[0])/7}}QRCodeReader.NO_POINTS=new Array;
//# sourceMappingURL=/sm/5fd58f6d3782b1c8d01ead3db07057584564be52d03fff3069fd78e998d10c2c.map