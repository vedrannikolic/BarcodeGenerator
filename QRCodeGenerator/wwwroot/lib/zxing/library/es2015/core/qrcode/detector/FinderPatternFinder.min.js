/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/qrcode/detector/FinderPatternFinder.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import DecodeHintType from"../../DecodeHintType";import ResultPoint from"../../ResultPoint";import FinderPattern from"./FinderPattern";import FinderPatternInfo from"./FinderPatternInfo";import NotFoundException from"../../NotFoundException";export default class FinderPatternFinder{constructor(t,e){this.image=t,this.resultPointCallback=e,this.possibleCenters=[],this.crossCheckStateCount=new Int32Array(5),this.resultPointCallback=e}getImage(){return this.image}getPossibleCenters(){return this.possibleCenters}find(t){const e=null!=t&&void 0!==t.get(DecodeHintType.TRY_HARDER),r=null!=t&&void 0!==t.get(DecodeHintType.PURE_BARCODE),n=this.image,s=n.getHeight(),i=n.getWidth();let o=Math.floor(3*s/(4*FinderPatternFinder.MAX_MODULES));(o<FinderPatternFinder.MIN_SKIP||e)&&(o=FinderPatternFinder.MIN_SKIP);let a=!1;const l=new Int32Array(5);for(let t=o-1;t<s&&!a;t+=o){l[0]=0,l[1]=0,l[2]=0,l[3]=0,l[4]=0;let e=0;for(let s=0;s<i;s++)if(n.get(s,t))1==(1&e)&&e++,l[e]++;else if(0==(1&e))if(4===e)if(FinderPatternFinder.foundPatternCross(l)){if(!0!==this.handlePossibleCenter(l,t,s,r)){l[0]=l[2],l[1]=l[3],l[2]=l[4],l[3]=1,l[4]=0,e=3;continue}if(o=2,!0===this.hasSkipped)a=this.haveMultiplyConfirmedCenters();else{const e=this.findRowSkip();e>l[2]&&(t+=e-l[2]-o,s=i-1)}e=0,l[0]=0,l[1]=0,l[2]=0,l[3]=0,l[4]=0}else l[0]=l[2],l[1]=l[3],l[2]=l[4],l[3]=1,l[4]=0,e=3;else l[++e]++;else l[e]++;if(FinderPatternFinder.foundPatternCross(l)){!0===this.handlePossibleCenter(l,t,i,r)&&(o=l[0],this.hasSkipped&&(a=this.haveMultiplyConfirmedCenters()))}}const h=this.selectBestPatterns();return ResultPoint.orderBestPatterns(h),new FinderPatternInfo(h)}static centerFromEnd(t,e){return e-t[4]-t[3]-t[2]/2}static foundPatternCross(t){let e=0;for(let r=0;r<5;r++){const n=t[r];if(0===n)return!1;e+=n}if(e<7)return!1;const r=e/7,n=r/2;return Math.abs(r-t[0])<n&&Math.abs(r-t[1])<n&&Math.abs(3*r-t[2])<3*n&&Math.abs(r-t[3])<n&&Math.abs(r-t[4])<n}getCrossCheckStateCount(){const t=this.crossCheckStateCount;return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t}crossCheckDiagonal(t,e,r,n){const s=this.getCrossCheckStateCount();let i=0;const o=this.image;for(;t>=i&&e>=i&&o.get(e-i,t-i);)s[2]++,i++;if(t<i||e<i)return!1;for(;t>=i&&e>=i&&!o.get(e-i,t-i)&&s[1]<=r;)s[1]++,i++;if(t<i||e<i||s[1]>r)return!1;for(;t>=i&&e>=i&&o.get(e-i,t-i)&&s[0]<=r;)s[0]++,i++;if(s[0]>r)return!1;const a=o.getHeight(),l=o.getWidth();for(i=1;t+i<a&&e+i<l&&o.get(e+i,t+i);)s[2]++,i++;if(t+i>=a||e+i>=l)return!1;for(;t+i<a&&e+i<l&&!o.get(e+i,t+i)&&s[3]<r;)s[3]++,i++;if(t+i>=a||e+i>=l||s[3]>=r)return!1;for(;t+i<a&&e+i<l&&o.get(e+i,t+i)&&s[4]<r;)s[4]++,i++;if(s[4]>=r)return!1;const h=s[0]+s[1]+s[2]+s[3]+s[4];return Math.abs(h-n)<2*n&&FinderPatternFinder.foundPatternCross(s)}crossCheckVertical(t,e,r,n){const s=this.image,i=s.getHeight(),o=this.getCrossCheckStateCount();let a=t;for(;a>=0&&s.get(e,a);)o[2]++,a--;if(a<0)return NaN;for(;a>=0&&!s.get(e,a)&&o[1]<=r;)o[1]++,a--;if(a<0||o[1]>r)return NaN;for(;a>=0&&s.get(e,a)&&o[0]<=r;)o[0]++,a--;if(o[0]>r)return NaN;for(a=t+1;a<i&&s.get(e,a);)o[2]++,a++;if(a===i)return NaN;for(;a<i&&!s.get(e,a)&&o[3]<r;)o[3]++,a++;if(a===i||o[3]>=r)return NaN;for(;a<i&&s.get(e,a)&&o[4]<r;)o[4]++,a++;if(o[4]>=r)return NaN;const l=o[0]+o[1]+o[2]+o[3]+o[4];return 5*Math.abs(l-n)>=2*n?NaN:FinderPatternFinder.foundPatternCross(o)?FinderPatternFinder.centerFromEnd(o,a):NaN}crossCheckHorizontal(t,e,r,n){const s=this.image,i=s.getWidth(),o=this.getCrossCheckStateCount();let a=t;for(;a>=0&&s.get(a,e);)o[2]++,a--;if(a<0)return NaN;for(;a>=0&&!s.get(a,e)&&o[1]<=r;)o[1]++,a--;if(a<0||o[1]>r)return NaN;for(;a>=0&&s.get(a,e)&&o[0]<=r;)o[0]++,a--;if(o[0]>r)return NaN;for(a=t+1;a<i&&s.get(a,e);)o[2]++,a++;if(a===i)return NaN;for(;a<i&&!s.get(a,e)&&o[3]<r;)o[3]++,a++;if(a===i||o[3]>=r)return NaN;for(;a<i&&s.get(a,e)&&o[4]<r;)o[4]++,a++;if(o[4]>=r)return NaN;const l=o[0]+o[1]+o[2]+o[3]+o[4];return 5*Math.abs(l-n)>=n?NaN:FinderPatternFinder.foundPatternCross(o)?FinderPatternFinder.centerFromEnd(o,a):NaN}handlePossibleCenter(t,e,r,n){const s=t[0]+t[1]+t[2]+t[3]+t[4];let i=FinderPatternFinder.centerFromEnd(t,r),o=this.crossCheckVertical(e,Math.floor(i),t[2],s);if(!isNaN(o)&&(i=this.crossCheckHorizontal(Math.floor(i),Math.floor(o),t[2],s),!isNaN(i)&&(!n||this.crossCheckDiagonal(Math.floor(o),Math.floor(i),t[2],s)))){const t=s/7;let e=!1;const r=this.possibleCenters;for(let n=0,s=r.length;n<s;n++){const s=r[n];if(s.aboutEquals(t,o,i)){r[n]=s.combineEstimate(o,i,t),e=!0;break}}if(!e){const e=new FinderPattern(i,o,t);r.push(e),null!==this.resultPointCallback&&void 0!==this.resultPointCallback&&this.resultPointCallback.foundPossibleResultPoint(e)}return!0}return!1}findRowSkip(){if(this.possibleCenters.length<=1)return 0;let t=null;for(const e of this.possibleCenters)if(e.getCount()>=FinderPatternFinder.CENTER_QUORUM){if(null!=t)return this.hasSkipped=!0,Math.floor((Math.abs(t.getX()-e.getX())-Math.abs(t.getY()-e.getY()))/2);t=e}return 0}haveMultiplyConfirmedCenters(){let t=0,e=0;const r=this.possibleCenters.length;for(const r of this.possibleCenters)r.getCount()>=FinderPatternFinder.CENTER_QUORUM&&(t++,e+=r.getEstimatedModuleSize());if(t<3)return!1;const n=e/r;let s=0;for(const t of this.possibleCenters)s+=Math.abs(t.getEstimatedModuleSize()-n);return s<=.05*e}selectBestPatterns(){const t=this.possibleCenters.length;if(t<3)throw new NotFoundException;const e=this.possibleCenters;let r;if(t>3){let n=0,s=0;for(const t of this.possibleCenters){const e=t.getEstimatedModuleSize();n+=e,s+=e*e}r=n/t;let i=Math.sqrt(s/t-r*r);e.sort(((t,e)=>{const n=Math.abs(e.getEstimatedModuleSize()-r),s=Math.abs(t.getEstimatedModuleSize()-r);return n<s?-1:n>s?1:0}));const o=Math.max(.2*r,i);for(let t=0;t<e.length&&e.length>3;t++){const n=e[t];Math.abs(n.getEstimatedModuleSize()-r)>o&&(e.splice(t,1),t--)}}if(e.length>3){let t=0;for(const r of e)t+=r.getEstimatedModuleSize();r=t/e.length,e.sort(((t,e)=>{if(e.getCount()===t.getCount()){const n=Math.abs(e.getEstimatedModuleSize()-r),s=Math.abs(t.getEstimatedModuleSize()-r);return n<s?1:n>s?-1:0}return e.getCount()-t.getCount()})),e.splice(3)}return[e[0],e[1],e[2]]}}FinderPatternFinder.CENTER_QUORUM=2,FinderPatternFinder.MIN_SKIP=3,FinderPatternFinder.MAX_MODULES=57;
//# sourceMappingURL=/sm/b3d72efc5d8b04095fe5545c3c3ed63f9941fffe2a924c5f5d3c708908d77cdf.map