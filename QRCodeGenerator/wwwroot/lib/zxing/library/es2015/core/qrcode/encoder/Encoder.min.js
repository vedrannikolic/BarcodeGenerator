/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@zxing/library@0.21.0/es2015/core/qrcode/encoder/Encoder.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import EncodeHintType from"../../EncodeHintType";import BitArray from"../../common/BitArray";import CharacterSetECI from"../../common/CharacterSetECI";import GenericGF from"../../common/reedsolomon/GenericGF";import ReedSolomonEncoder from"../../common/reedsolomon/ReedSolomonEncoder";import Mode from"../decoder/Mode";import Version from"../decoder/Version";import MaskUtil from"./MaskUtil";import ByteMatrix from"./ByteMatrix";import QRCode from"./QRCode";import MatrixUtil from"./MatrixUtil";import StringEncoding from"../../util/StringEncoding";import BlockPair from"./BlockPair";import WriterException from"../../WriterException";export default class Encoder{constructor(){}static calculateMaskPenalty(e){return MaskUtil.applyMaskPenaltyRule1(e)+MaskUtil.applyMaskPenaltyRule2(e)+MaskUtil.applyMaskPenaltyRule3(e)+MaskUtil.applyMaskPenaltyRule4(e)}static encode(e,t,o=null){let r=Encoder.DEFAULT_BYTE_MODE_ENCODING;const n=null!==o&&void 0!==o.get(EncodeHintType.CHARACTER_SET);n&&(r=o.get(EncodeHintType.CHARACTER_SET).toString());const i=this.chooseMode(e,r),a=new BitArray;if(i===Mode.BYTE&&(n||Encoder.DEFAULT_BYTE_MODE_ENCODING!==r)){const e=CharacterSetECI.getCharacterSetECIByName(r);void 0!==e&&this.appendECI(e,a)}this.appendModeInfo(i,a);const s=new BitArray;let c;if(this.appendBytes(e,i,s,r),null!==o&&void 0!==o.get(EncodeHintType.QR_VERSION)){const e=Number.parseInt(o.get(EncodeHintType.QR_VERSION).toString(),10);c=Version.getVersionForNumber(e);const r=this.calculateBitsNeeded(i,a,s,c);if(!this.willFit(r,c,t))throw new WriterException("Data too big for requested version")}else c=this.recommendVersion(t,i,a,s);const d=new BitArray;d.appendBitArray(a);const l=i===Mode.BYTE?s.getSizeInBytes():e.length;this.appendLengthInfo(l,c,i,d),d.appendBitArray(s);const p=c.getECBlocksForLevel(t),E=c.getTotalCodewords()-p.getTotalECCodewords();this.terminateBits(E,d);const h=this.interleaveWithECBytes(d,c.getTotalCodewords(),E,p.getNumBlocks()),g=new QRCode;g.setECLevel(t),g.setMode(i),g.setVersion(c);const B=c.getDimensionForVersion(),m=new ByteMatrix(B,B),f=this.chooseMaskPattern(h,t,c,m);return g.setMaskPattern(f),MatrixUtil.buildMatrix(h,t,c,f,m),g.setMatrix(m),g}static recommendVersion(e,t,o,r){const n=this.calculateBitsNeeded(t,o,r,Version.getVersionForNumber(1)),i=this.chooseVersion(n,e),a=this.calculateBitsNeeded(t,o,r,i);return this.chooseVersion(a,e)}static calculateBitsNeeded(e,t,o,r){return t.getSize()+e.getCharacterCountBits(r)+o.getSize()}static getAlphanumericCode(e){return e<Encoder.ALPHANUMERIC_TABLE.length?Encoder.ALPHANUMERIC_TABLE[e]:-1}static chooseMode(e,t=null){if(CharacterSetECI.SJIS.getName()===t&&this.isOnlyDoubleByteKanji(e))return Mode.KANJI;let o=!1,r=!1;for(let t=0,n=e.length;t<n;++t){const n=e.charAt(t);if(Encoder.isDigit(n))o=!0;else{if(-1===this.getAlphanumericCode(n.charCodeAt(0)))return Mode.BYTE;r=!0}}return r?Mode.ALPHANUMERIC:o?Mode.NUMERIC:Mode.BYTE}static isOnlyDoubleByteKanji(e){let t;try{t=StringEncoding.encode(e,CharacterSetECI.SJIS)}catch(e){return!1}const o=t.length;if(o%2!=0)return!1;for(let e=0;e<o;e+=2){const o=255&t[e];if((o<129||o>159)&&(o<224||o>235))return!1}return!0}static chooseMaskPattern(e,t,o,r){let n=Number.MAX_SAFE_INTEGER,i=-1;for(let a=0;a<QRCode.NUM_MASK_PATTERNS;a++){MatrixUtil.buildMatrix(e,t,o,a,r);let s=this.calculateMaskPenalty(r);s<n&&(n=s,i=a)}return i}static chooseVersion(e,t){for(let o=1;o<=40;o++){const r=Version.getVersionForNumber(o);if(Encoder.willFit(e,r,t))return r}throw new WriterException("Data too big")}static willFit(e,t,o){return t.getTotalCodewords()-t.getECBlocksForLevel(o).getTotalECCodewords()>=(e+7)/8}static terminateBits(e,t){const o=8*e;if(t.getSize()>o)throw new WriterException("data bits cannot fit in the QR Code"+t.getSize()+" > "+o);for(let e=0;e<4&&t.getSize()<o;++e)t.appendBit(!1);const r=7&t.getSize();if(r>0)for(let e=r;e<8;e++)t.appendBit(!1);const n=e-t.getSizeInBytes();for(let e=0;e<n;++e)t.appendBits(0==(1&e)?236:17,8);if(t.getSize()!==o)throw new WriterException("Bits size does not equal capacity")}static getNumDataBytesAndNumECBytesForBlockID(e,t,o,r,n,i){if(r>=o)throw new WriterException("Block ID too large");const a=e%o,s=o-a,c=Math.floor(e/o),d=c+1,l=Math.floor(t/o),p=l+1,E=c-l,h=d-p;if(E!==h)throw new WriterException("EC bytes mismatch");if(o!==s+a)throw new WriterException("RS blocks mismatch");if(e!==(l+E)*s+(p+h)*a)throw new WriterException("Total bytes mismatch");r<s?(n[0]=l,i[0]=E):(n[0]=p,i[0]=h)}static interleaveWithECBytes(e,t,o,r){if(e.getSizeInBytes()!==o)throw new WriterException("Number of bits and data bytes does not match");let n=0,i=0,a=0;const s=new Array;for(let c=0;c<r;++c){const d=new Int32Array(1),l=new Int32Array(1);Encoder.getNumDataBytesAndNumECBytesForBlockID(t,o,r,c,d,l);const p=d[0],E=new Uint8Array(p);e.toBytes(8*n,E,0,p);const h=Encoder.generateECBytes(E,l[0]);s.push(new BlockPair(E,h)),i=Math.max(i,p),a=Math.max(a,h.length),n+=d[0]}if(o!==n)throw new WriterException("Data bytes does not match offset");const c=new BitArray;for(let e=0;e<i;++e)for(const t of s){const o=t.getDataBytes();e<o.length&&c.appendBits(o[e],8)}for(let e=0;e<a;++e)for(const t of s){const o=t.getErrorCorrectionBytes();e<o.length&&c.appendBits(o[e],8)}if(t!==c.getSizeInBytes())throw new WriterException("Interleaving error: "+t+" and "+c.getSizeInBytes()+" differ.");return c}static generateECBytes(e,t){const o=e.length,r=new Int32Array(o+t);for(let t=0;t<o;t++)r[t]=255&e[t];new ReedSolomonEncoder(GenericGF.QR_CODE_FIELD_256).encode(r,t);const n=new Uint8Array(t);for(let e=0;e<t;e++)n[e]=r[o+e];return n}static appendModeInfo(e,t){t.appendBits(e.getBits(),4)}static appendLengthInfo(e,t,o,r){const n=o.getCharacterCountBits(t);if(e>=1<<n)throw new WriterException(e+" is bigger than "+((1<<n)-1));r.appendBits(e,n)}static appendBytes(e,t,o,r){switch(t){case Mode.NUMERIC:Encoder.appendNumericBytes(e,o);break;case Mode.ALPHANUMERIC:Encoder.appendAlphanumericBytes(e,o);break;case Mode.BYTE:Encoder.append8BitBytes(e,o,r);break;case Mode.KANJI:Encoder.appendKanjiBytes(e,o);break;default:throw new WriterException("Invalid mode: "+t)}}static getDigit(e){return e.charCodeAt(0)-48}static isDigit(e){const t=Encoder.getDigit(e);return t>=0&&t<=9}static appendNumericBytes(e,t){const o=e.length;let r=0;for(;r<o;){const n=Encoder.getDigit(e.charAt(r));if(r+2<o){const o=Encoder.getDigit(e.charAt(r+1)),i=Encoder.getDigit(e.charAt(r+2));t.appendBits(100*n+10*o+i,10),r+=3}else if(r+1<o){const o=Encoder.getDigit(e.charAt(r+1));t.appendBits(10*n+o,7),r+=2}else t.appendBits(n,4),r++}}static appendAlphanumericBytes(e,t){const o=e.length;let r=0;for(;r<o;){const n=Encoder.getAlphanumericCode(e.charCodeAt(r));if(-1===n)throw new WriterException;if(r+1<o){const o=Encoder.getAlphanumericCode(e.charCodeAt(r+1));if(-1===o)throw new WriterException;t.appendBits(45*n+o,11),r+=2}else t.appendBits(n,6),r++}}static append8BitBytes(e,t,o){let r;try{r=StringEncoding.encode(e,o)}catch(e){throw new WriterException(e)}for(let e=0,o=r.length;e!==o;e++){const o=r[e];t.appendBits(o,8)}}static appendKanjiBytes(e,t){let o;try{o=StringEncoding.encode(e,CharacterSetECI.SJIS)}catch(e){throw new WriterException(e)}const r=o.length;for(let e=0;e<r;e+=2){const r=(255&o[e])<<8&4294967295|255&o[e+1];let n=-1;if(r>=33088&&r<=40956?n=r-33088:r>=57408&&r<=60351&&(n=r-49472),-1===n)throw new WriterException("Invalid byte sequence");const i=192*(n>>8)+(255&n);t.appendBits(i,13)}}static appendECI(e,t){t.appendBits(Mode.ECI.getBits(),4),t.appendBits(e.getValue(),8)}}Encoder.ALPHANUMERIC_TABLE=Int32Array.from([-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,36,-1,-1,-1,37,38,-1,-1,-1,-1,39,40,-1,41,42,43,0,1,2,3,4,5,6,7,8,9,44,-1,-1,-1,-1,-1,-1,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,-1,-1,-1,-1,-1]),Encoder.DEFAULT_BYTE_MODE_ENCODING=CharacterSetECI.UTF8.getName();
//# sourceMappingURL=/sm/82d4789dda0e589cde7a79421e9628155963119c721cbef9230a9e4666790840.map